package com.socialproxy.crypto;

import javax.crypto.Cipher;
import javax.crypto.spec.GCMParameterSpec;
import javax.crypto.spec.SecretKeySpec;

public class AETest
{
	final protected static char[] hexArray = "0123456789abcdef".toCharArray();
	public static String bytesToString (byte[] bytes, int offset, int length)
	{
		char[] hexChars = new char[length * 2];
		for (int j = 0; j < length; j++) {
			int v = bytes[offset + j] & 0xFF;
			hexChars[j * 2] = hexArray[v >>> 4];
			hexChars[j * 2 + 1] = hexArray[v & 0x0F];
		}
		return new String(hexChars);
	}

	private static void testAlgo (String algo) throws Exception
	{
		Cipher enc = Cipher.getInstance(algo);
		Cipher dec = Cipher.getInstance(algo);
		SecretKeySpec aesKeySpec = new SecretKeySpec("1234567890123456".getBytes(), "AES");
		for (int i = 0; i < 10; i ++) {
			byte [] iv = longToBytes128(i);
			enc.init(Cipher.ENCRYPT_MODE, aesKeySpec, new GCMParameterSpec(96, iv));
			dec.init(Cipher.ENCRYPT_MODE, aesKeySpec, new GCMParameterSpec(96, iv));
		}
	}

	public static void main (String [] args) throws Exception
	{
		testAlgo("AES/GCM/NoPadding");
	}
}
