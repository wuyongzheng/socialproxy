Carrier Protocol
====

The carrier protocol multiplex many tcp channels into one carrier connection.
The carrier connection is a reliable, stream oriented connection. E.g. TCP or
UDT (http://udt.sourceforge.net/).

local TCP 1  --\                              /-- remote TCP 1
                local   __<carrier  __ remote 
                carrier    protocol>   carrier
local TCP 2  --/                              \-- remote TCP 2

Handshake and Authentication
----

Objective:
* Establish session key
* Prevent replay attack
* Eavesdropper can't distinguish traffic from random bits

K_pa, K_sa: A's public and private key
K_pb, K_sb: B's public and private key
K_s: A and B's shared key derived using ECDH.
K_s1: sha1(K_s,"session-auth")

1. A connects to B
2. A chooses a nonce Na
   A -> B: {Na, sha1(K_pb)} K_s1
   Cipher uses AES CBC with iv=0
3. B tries all of its friend's key one by one to check that:
   * sha1(K_pb) is correct
   * Na is new.
   If no key can satisfy them. close connection
4. B chooses a nonce Nb
   B -> A: {Nb, sha1(K_pa)} K_s1
   If they do TCP simultaneous open, step 2 and 4 happens simultaneously.
5. A do the same as Step 3.
6. The Following traffic from A to B is encrypted using CTR AES as a stream
   cypher with key sha1(Na,Nb) and iv 0
7. The other direction should use key sha1(Nb,Na)

Multiplexing and Demultiplexing
----

Objective:
* Reuse the same connection (carrier) for mutiple TCP sessions (channels),
  because NAT hole punching can be expensive.
* Multiplex many channels into one carrier
* Per channel congestion control
* The carrier already takes care of packer droping and reordering, so we don't
  need to worry about them.

Each channel has a channel ID unique in the carrier. The ID is a integer in the
range [1,126]. Each channel has a state: EMPTY, CONNECTING, CONNECTED, TEARING
down. A channel's state in two peer's view can be different due to
synchronization. All integers are in network byte order.

* CON1 Connect Request
    0(1): 0, means command
    1(1): 1, means connect request
    2(1): new channel ID
          To prevent two peers choose the same ID simultaneously, The peer with
          smaller public key can only choose ID in the range [1, 63].  The
          other can only choose [64, 126].
    3(2): initial buffer size in ACK_UNIT
    5(1): target type
          0: ipv4 addr, N=2+4
          1: ipv6 addr, N=2+16
          2: hostname, N=2+1+strlen(hostname)
          3: web proxy, N=0
    6(N): target addr, depends on target type
          for 0: port(2), ipv4 addr(4)
          for 1: port(2), ipv6 addr(16)
          for 2: port(2), strlen(hostname)(1), hostname(strlen(hostname))
          for 3: none
    6+N
* CON2 Connect Response
    0(1): 0, means command
    1(1): 2, means connect response
    2(1): channel ID
    3(1): 0, 1 or 2.
          0 means connected
          1 means target not allowed or invalid CON1 message
          2 means connection failed
    4(2): initial buffer size (ommited if not connected)
    6
* DATA Channel Message
    0(1): The most significant bit:
            0: ack only, no data
            1: ack+data
          The rest is channel ID. 1 <= channel ID <= 126
    1(1): ack size in ACK_UNIT
    2(2): data size N (ommited if there is no data)
          For ease of programming, we limit the size of all messages to
          MAX_MESSAGESIZE=8192 bytes, so max(N)=8188.
    4(N): data
    4+N
* TRDN Channel Teardown
    0(1): 0, means command
    1(1): 3, means teardown
    2(1): channel ID
* PING/PONG
    0(1): 0, means command
    1(1): 4/5, means ping/pong
    2(4): nonce, pong should preserve this
    6(8): timestamp, current time in milliseconds since 1970 UTC
    14
* PADD Padding. Used to prevent packet size analysis
    0(1): 0, means command
    1(1): 6, means padding
    2(1): size N. 0 <= N <= 255
    3(N): data. must be all 0
    3+N

Initially, all channels are in the EMPTY state. Here is a state-event matrix.

* EMPTY
  - Actively create a channel: send CON1. state changed to CONNECTING
  - Received CON1 and not allowed: send CON2. state no change.
  - Received CON1: connect to target, state changed to CONNECTING
  - Received CON2, DATA or TRDN: not possible.
* CONNECTING:
  - connection to target failed: send CON2. state change to EMPTY
  - connection to target succeed: send CON2. state change to CONNECTED
  - Received CON2 with success: state change to CONNECTED
  - Received CON2 with failure: state change to EMPTY. close local connection
    or send SOCKS negative connection response
  - Received CON1, DATA or TRDN: not possible.
* CONNECTED:
  - local connection disconnected: send TRDN. state change to TEARING
  - Received TRDN: send TRDN. close local connection. state change to EMPTY
  - Received DATA: relay.
  - Received CON1 or CON2: not possible.
* TEARING:
  - Received DATA: ignore.
  - Received TRDN: state change to EMPTY.
  - Received CON1 or CON2: not possible.

Congestion Control
----

With multiplexing, one channel can block other channels. Unlike TCP, where the
receiver can drop packets to inform the sender to slow down and resend, our
carrier protocol doesn't drop packets. If the receiver side's local socket
doesn't consume, and the sender keeps sending, the receiver's buffer will be
full and the whole carrier is congested. In the worst case, a local socket may
DOS other channels by not consuming any data.

To prevent this, When a channel is estblished, two peers tell each other their
receiving buffer size.  When the receiver's local socket consumes data, the
receiver acks the sender by saying, "Hi, you can send me more data of size N".

We don't need byte-level granularity like TCP.  The ack's unit is 4096 bytes
(ACK_UNIT).  For example, if the other peer sends ack 17, it means we can send
69632 more bytes.  This design limits the per channel throughput to at most
buffsize/RTT.

Choise of ACK_UNIT and MAX_MESSAGESIZE
----
If MAX_MESSAGESIZE is too small, the overhead in terms of system call, thread
switch, message header will be too large. If MAX_MESSAGESIZE is too large, the
latency can be large.

If ACK_UNIT is too small, ack message needs to be sent too often. If ACK_UNIT
is too large, TChannel's recvbuf need to be large as well.

Speed throttling
----

TODO
